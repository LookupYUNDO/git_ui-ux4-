.container{
    display: flex;
    gap: 20px;
}

.box{
    width: 200px;
    height: 100px;
    border-color: red;
    border-width: 10px;
    border-style: solid;
    /* border: 10px solid red; */

    background-color: lightblue;
    padding: 20px;
}

.content-box{
    box-sizing: content-box;
    /* width 길이가 260 세로가 160이고 */
}

.border-box{
    box-sizing: border-box;
    /* 이건 200 * 100이다 보통은 이걸 많이 사용합니다. */

    /* 지정된 너비와 높이 내에서 패디과 테두리를 포함하르로, 실제로 콘텐츠가 차지할수있는 공간이 작아진다. */
}

/* 둘의 차이점은 
    패딩이랑 보더를 더해서 사용하다보니 컨텐츠영역이 줄어든다. > 보더박스

    컨탠츠박스는 컨탠츠 사이즈를 유지하면서 겉에 영역을 준다.
*/


/* 장단점 
    content-box
    장점 컨텐츠의 유연성 > 지정된 크기에 따라 동적으로 조정되므로, 디자인의 유연성이 높다.
    디자인 제어 : 패딩, 테두리를 분리하여 디자인 요소를 더 정교하게 제어 가능
    
    단점 > 레이아웃의 복잡성 > 다 각각 크기를 계산해야하므로 시간과 노력이 요구됨,
    그러다 보니 계산 오류 가능성이 발생 > 별도로 계산하다 오류가 발생할 확률이 높다.


    border-box
    장점 예측가능성 > 총 너비와 높이가 예측하기 쉽다.
    유지보수, 간편한 계산 > 일관된 디자인 , 별도로 계산할 필요가 없다.

    단점 내용공간 감소 > 패딩과 테두리가 포함되므로 실제 콘텐츠 영역이 작아진다.

*/


